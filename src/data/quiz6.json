[
  {
    "number": "6",
    "question": "Οι μεταβλητές a, b, c, d ενός προγράμματος που θα εκτελεστεί σε επεξεργαστή RISC-V βρίσκονται ήδη στους καταχωρητές x6, x7, x8, x9 (δηλαδή έχουν ήδη εκτελεστεί οι εντολές la και lw που φέρνουν τις τιμές τους από τη μνήμη στους καταχωρητές). Οι αριθμοί είναι απρόσημοι.\nΝα γράψετε το υπόλοιπο του προγράμματος που υπολογίζει την τιμή της παράστασης \\( \\text{a} \\times \\text{b} + \\text{c} \\times \\text{d} \\) χωρίς να χρησιμοποιήσετε εντολές πολλαπλασιασμού ή διαίρεσης (μπορείτε να υποθέσετε ότι δεν υπάρχει ενδεχόμενο υπερχείλισης οπότε δεν χρειάζεται να κάνετε κανέναν σχετικό έλεγχο). Μπορείτε να χρησιμοποιήσετε όλες τις υπόλοιπες εντολές που μάθαμε ως τώρα και όποιους άλλους καταχωρητές θέλετε. Η τελική τιμή της παράστασης να αποθηκεύεται στον καταχωρητή x10. Το πρόγραμμά σας να αποτελείται από τις λιγότερες δυνατές εντολές. Στο πλήθος εντολών μην υπολογίζετε τις εντολές τερματισμού του προγράμματος ούτε φυσικά τις αρχικές la και lw.\nΠοιος είναι ο αριθμός των εντολών του προγράμματός σας;",
    "solution": "Ο κώδικας περιλαμβάνει δύο βρόχους. Ο πρώτος υπολογίζει το a x b με διαδοχικές αφαιρέσεις από το b και προσθέσεις του a στο γινόμενο. Ομοίως ο δεύτερος υπολογίζει το c x d. Στο τέλος τα δύο γινόμενα προστίθενται.\n\n**Συνολικά 9 εντολές (υπολογίζονται μόνο οι χρωματισμένες με βάση τις οδηγίες της εκφώνησης).**\n\nΣε ποιες περιπτώσεις δεν δουλεύει σωστά το πρόγραμμα;\n\n```\n    .text\n    .globl __start\n__start:\n    la x3, a\n    lw x6, 0(x3)\n    la x3, b\n    lw x7, 0(x3)\n    la x3, c\n    lw x8, 0(x3)\n    la x3, d\n    lw x9, 0(x3)\n    add x11, x0, x0        # clear the product\naxb: add x11, x11, x6  # add multiplicant to product\n    addi x7, x7, -1        # minus 1 the multiplier\n    bgt x7, x0, axb        # continue if > zero\n    add x12, x0, x0        # clear the product\ncxd: add x12, x12, x8  # add multiplicant to product\n    addi x9, x9, -1        # minus 1 the multiplier\n    bgt x9, x0, cxd        # continue if > zero\n    add x10, x11, x12\n    li a7, 10              # Done, terminate program\n    ecall                  # au revoir...\n```\n\nΚαι μια λύση με ακόμη λιγότερες εντολές. Η συσσώρευση των αθροισμάτων μπορεί να γίνεται απευθείας στον x10 και μεταξύ των δύο βρόχων να μην μηδενίζεται κανένα γινόμενο.\n\n**Συνολικά μόνο 7 εντολές (υπολογίζονται και πάλι μόνο οι χρωματισμένες με βάση τις οδηγίες της εκφώνησης).**\n\nΣε ποιες περιπτώσεις δεν δουλεύει σωστά το πρόγραμμα;\n```\n    .text\n   .globl __start\n__start:\nla x3, a\nlw x6, 0(x3)\nla x3, b\nlw x7, 0(x3)\nla x3, c\nlw x8, 0(x3)\nla x3, d\nlw x9, 0(x3)\nadd x10, x0, x0        # clear the product\naxb: add x10, x10, x6  # add multiplicant to product\naddi x7, x7, -1        # minus 1 the multiplier\nbgt x7, x0, axb        # continue if > zero\ncxd: add x10, x10, x8  # add multiplicant to product\naddi x9, x9, -1        # minus 1 the multiplier\nbgt x9, x0, cxd        # continue if > zero\nli a7, 10              # Done, terminate program\necall                  # au revoir...\n```",
    "answers": [
      {
        "text": "Δες ενδεικτική λύση",
        "correct": true
      }
    ]
  }
]
