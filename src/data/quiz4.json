[
  {
    "question": "Μέχρι σήμερα έχουμε διδαχθεί τις εξής εντολές συμβολικής γλώσσας RISC-V: add, sub, addi, lw, sw, beq, bne, jal, jalr, and, andi, or, ori, xor, xori, slli, srli.\n Μπορείτε να χρησιμοποιήσετε αυτές τις εντολές και μόνο τους επτά καταχωρητές x0 και x5 … x10.\n Γράψτε πρόγραμμα συμβολικής γλώσσας με τις λιγότερες εντολές που μπορείτε που να «περιστρέφει» τα περιεχόμενα των καταχωρητών x5 έως x10.\n Δηλαδή στο τέλος του προγράμματος ο x5 να περιέχει την αρχική τιμή του x6, ο x6 να περιέχει την αρχική τιμή του x7, …, ο x9 να περιέχει την αρχική τιμή του x10, και ο x10 να περιέχει την αρχική τιμή του x5.\n Ποιός είναι ο αριθμός των εντολών του προγράμματός σας;",
    "solution": "Με βάση την εκφώνηση δεν υπάρχουν διαθέσιμοι καταχωρητές για να υλοποιηθεί λειτουργία αντιμετάθεσης (swap).\n Ο x0 δεν μπορεί να χρησιμοποιηθεί για αυτόν τον σκοπό διότι είναι σταθερός στην τιμή 0.\n Ομοίως, δεν μπορείνα χρησιμοποιηθεί κάποια περιοχή μνήμης (π.χ. η στοίβα) για την αντιμετάθεση τιμών) επειδή ούτε ο καταχωρητής sp(x2) είναι διαθέσιμος.\n Μόνη λύση είναι η αντιμετάθεση των περιεχομένων «διπλανών» καταχωρητών με χρήση εντολών xor.\n Ο μικρότερος αριθμός εντολών για να επιτευχθεί το ζητούμενο είναι 15.\n Ο κώδικας:\n\n\n ```\nxor x5, x5, x10\nxor x10, x10, x5\nxor x5, x5, x10\n\nxor x5, x5, x9\nxor x9, x9, x5\nxor x5, x5, x9\n\nxor x5, x5, x8\nxor x8, x8, x5\nxor x5, x5, x8\n\nxor x5, x5, x7\nxor x7, x7, x5\nxor x5, x5, x7\n\nxor x5, x5, x6\nxor x6, x6, x5\nxor x5, x5, x6\n\n``` \n\nΣτο τέλος της εκτέλεσης ο x5 περιέχει την αρχική τιμή του x6, ο x6 περιέχει την αρχική τιμή του x7, ο x7 περιέχει την αρχική τιμή του x8, ο x8 περιέχει την αρχική τιμή του x9, ο x9 περιέχει την αρχική τιμή του x10 και ο x10 περιέχει την αρχική τιμή του x5.",
    "answers": [
      {
        "text": "\\(\\lt\\) 5",
        "correct": false
      },
      {
        "text": "5",
        "correct": false
      },
      {
        "text": "6",
        "correct": false
      },
      {
        "text": "7",
        "correct": false
      },
      {
        "text": "8",
        "correct": false
      },
      {
        "text": "9",
        "correct": false
      },
      {
        "text": "10",
        "correct": false
      },
      {
        "text": "11",
        "correct": false
      },
      {
        "text": "12",
        "correct": false
      },
      {
        "text": "13",
        "correct": false
      },
      {
        "text": "14",
        "correct": false
      },
      {
        "text": "15",
        "correct": true
      },
      {
        "text": "\\(\\gt\\) 15",
        "correct": false
      }
    ]
  }
]
